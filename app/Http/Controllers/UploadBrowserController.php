<?php

namespace App\Http\Controllers;

use App\Enums\UploadStatus;
use App\Models\Image;
use App\Models\Upload;
use Illuminate\Contracts\View\View;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use League\Csv\Writer;

class UploadBrowserController extends Controller
{
    public function index(): View
    {
        $uploads = Upload::with(['images' => function ($query): void {
            $query->orderBy('variant');
        }])->latest()->paginate(20);

        $completedUploads = Upload::where('status', UploadStatus::Completed)
            ->orderByDesc('created_at')
            ->take(200)
            ->get(['id', 'original_filename']);

        return view('uploads.index', [
            'uploads' => $uploads,
            'completedUploads' => $completedUploads,
        ]);
    }

    public function showImage(Upload $upload, Image $image)
    {
        abort_unless($image->upload_id === $upload->getKey(), 404);

        $disk = $upload->storage_disk;

        if (! Storage::disk($disk)->exists($image->path)) {
            abort(404);
        }

        return Storage::disk($disk)->response($image->path);
    }

    public function generateCsv(Request $request)
    {
        $data = $request->validate([
            'rows' => 'required|integer|min:1|max:10000',
            'prefix' => 'nullable|string|max:10',
            'upload_ids' => 'array',
            'upload_ids.*' => 'string|exists:uploads,id',
        ]);

        $rows = (int) $data['rows'];
        $prefix = strtoupper($data['prefix'] ?? 'SKU');

        $selectedUploads = collect($data['upload_ids'] ?? [])
            ->map(function (string $id) {
                return Upload::with('images')->where('status', UploadStatus::Completed)->find($id);
            })
            ->filter(fn ($upload) => $upload !== null && $upload->images->isNotEmpty())
            ->values();

        $writer = Writer::createFromString('');
        $writer->insertOne(['sku', 'name', 'price', 'description', 'upload_id', 'category', 'weight_g', 'in_stock']);

        for ($index = 1; $index <= $rows; $index++) {
            $sku = sprintf('%s%06d', $prefix, $index);
            $name = 'Product ' . $index;
            $price = number_format(random_int(500, 5000) / 100, 2, '.', '');
            $description = 'Autogenerated row #' . $index;
            $categories = ['Electronics', 'Grocery', 'Sports', 'Home'];
            $category = $categories[array_rand($categories)];
            $weight = random_int(100, 750);
            $inStock = (bool) random_int(0, 1);

            $uploadId = '';
            if ($selectedUploads->isNotEmpty()) {
                $upload = $selectedUploads[($index - 1) % $selectedUploads->count()];
                $uploadId = $upload->getKey();
            }

            $writer->insertOne([
                $sku,
                $name,
                $price,
                $description,
                $uploadId,
                $category,
                $weight,
                $inStock ? 'true' : 'false',
            ]);
        }

        $filename = 'products_' . now()->format('Ymd_His') . '.csv';

        return response((string) $writer)->withHeaders([
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"',
        ]);
    }
}